<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ARM</title>
    <link href="/2025/03/06/Arm/"/>
    <url>/2025/03/06/Arm/</url>
    
    <content type="html"><![CDATA[<h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p> ARM64共有34个寄存器。包括31个通用寄存器、SP、PC、CPSR（current program status registers）。</p><ul><li>x0-x30 64bit 通用寄存器，如果有需要可以当做32bit使用：W0-W30。其中x0 - x7：这 8 个寄存器主要用来存储传递参数 。如果参数超过 8 个，则会通过栈来传递 ；x0 也用来存放上文方法的返回值。</li><li>FP(x29) 64bit 保存栈帧地址(栈底指针)，指向当前方法栈的底部。</li><li>LR(x30) 64bit 通常称x30为程序链接寄存器，因为这个寄存器会记录着当前方法的调用方地址 ，即当前方法调用完成时应该返回的位置。例如我们遇到 Crash 要获取方法堆栈，其本质就是不断的向上递归每一个 x30 寄存器的记录状态（也就是栈上 X30 寄存器的内容） 来找到上层调用方。</li><li>SP 64bit 保存栈指针,使用 SP&#x2F;WSP来进行对SP寄存器的访问。指向当前方法栈的顶部。</li><li>PC 64bit 程序计数器，俗称PC指针，总是指向即将要执行的下一条指令,在arm64中，软件是不能改写PC寄存器的。</li><li>CPSR 32bit 状态寄存器</li></ul><h3 id="CPSR状态寄存器"><a href="#CPSR状态寄存器" class="headerlink" title="CPSR状态寄存器"></a>CPSR状态寄存器</h3><p>不同于其他寄存器，其他寄存器是用来存放数据的，是整个寄存器具有一个含义，而CPSR(current program status registers)状态寄存器是按位起作用的，他的每一位都有专门的含义，记录特定的信息</p><ul><li>CPSR的低8位（包括I、F、T和M[4:0]）称为控制位，程序无法修改，除非CPU运行于特权模式下，程序才能修改控制位</li><li>N、Z、C、V均为条件码标志位。它们的内容可被算术或逻辑运算的结果所改变，并且可以决定某条指令是否被执行，意义重大</li></ul><table><thead><tr><th>31</th><th>30</th><th>29</th><th>28</th><th>27~8</th><th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>N</td><td>Z</td><td>C</td><td>V</td><td>保留</td><td>I</td><td>F</td><td>T</td><td>M4</td><td>M3</td><td>M2</td><td>M1</td><td>M0</td></tr></tbody></table><h4 id="N-Negative-标志"><a href="#N-Negative-标志" class="headerlink" title="N(Negative)标志"></a>N(Negative)标志</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">CPSR</span>的第<span class="hljs-number">31</span>位是 N，符号标志位。它记录相关指令执行后,其结果是否为负.如果为负 N = <span class="hljs-number">1</span>,如果是非负数 N = <span class="hljs-number">0</span>.<br></code></pre></td></tr></table></figure><p><strong>注意</strong>,在ARM64的指令集中,有的指令的执行时影响状态寄存器的,比如add\sub\or等,他们大都是运算指令(进行逻辑或算数运算)；</p><h4 id="Z-Zero-标志"><a href="#Z-Zero-标志" class="headerlink" title="Z(Zero)标志"></a>Z(Zero)标志</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">CPSR</span>的第<span class="hljs-number">30</span>位是Z，<span class="hljs-number">0</span>标志位。它记录相关指令执行后,其结果是否为<span class="hljs-number">0</span>.如果结果为<span class="hljs-number">0</span>.那么Z = <span class="hljs-number">1</span>.如果结果不为<span class="hljs-number">0</span>,那么Z = <span class="hljs-number">0</span>.<br></code></pre></td></tr></table></figure><p>Z标记相关指令的计算结果是否为0,如果为0,则N要记录下”是0”这样的肯定信息.在计算机中1表示逻辑真,表示肯定.所以当结果为0的时候Z &#x3D; 1,表示”结果是0”.如果结果不为0,则Z要记录下”不是0”这样的否定信息.在计算机中0表示逻辑假,表示否定,所以当结果不为0的时候Z &#x3D; 0,表示”结果不为0”。</p><h4 id="C-Carry-标志"><a href="#C-Carry-标志" class="headerlink" title="C(Carry)标志"></a>C(Carry)标志</h4><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">CPSR</span>的第<span class="hljs-number">29</span>位是<span class="hljs-built_in">C</span>，进位标志位。一般情况下<span class="hljs-operator">,</span>进行无符号数的运算。<br>加法运算：当运算结果产生了进位时（无符号数溢出），<span class="hljs-built_in">C</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>，否则<span class="hljs-built_in">C</span><span class="hljs-operator">=</span><span class="hljs-number">0</span>。<br>减法运算（包括<span class="hljs-variable">CMP</span>）：当运算时产生了借位时（无符号数溢出），<span class="hljs-built_in">C</span><span class="hljs-operator">=</span><span class="hljs-number">0</span>，否则<span class="hljs-built_in">C</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>。<br></code></pre></td></tr></table></figure><h4 id="V-Overflow-溢出标志位"><a href="#V-Overflow-溢出标志位" class="headerlink" title="V(Overflow)溢出标志位"></a>V(Overflow)溢出标志位</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">CPSR</span>的第<span class="hljs-number">28</span>位是V，溢出标志位。在进行有符号数运算的时候，如果超过了机器所能标识的范围，称为溢出。<br></code></pre></td></tr></table></figure><ul><li>正数 + 正数 为负数 溢出</li><li>负数 + 负数 为正数 溢出</li><li>正数 + 负数 不可能溢出</li></ul><h3 id="LR"><a href="#LR" class="headerlink" title="LR"></a>LR</h3><p>LR用途有二，一是保存子程序返回地址，当调用BL、BX、BLX等跳转指令时会自动保存返回地址到LR；二是保存异常发生的异常返回地址。</p><h3 id="PC"><a href="#PC" class="headerlink" title="PC"></a>PC</h3><p>PC（Program Counter）为程序计数器，用于保存程序的执行地址，在ARM的三级流水线架构中，程序流水线包括取址、译码和执行三个阶段，PC指向的是当前取址的程序地址，所以32位ARM中，译码地址（正在解析还未执行的程序）为PC-4，执行地址（当前正在执行的程序地址）为PC-8。<br> 当突然发生中断的时候，保存的是PC的地址。如果返回的时候返回PC，那么中间就有一个指令没有执行，所以用SUB pc lr-irq #4。</p><h3 id="SP"><a href="#SP" class="headerlink" title="SP"></a>SP</h3><p>每一种异常模式都有其自己独立的r13，它通常指向异常模式所专用的堆栈，也就是说五种异常模式、非异常模式（用户模式和系统模式），都有各自独立的堆栈，用不同的堆栈指针来索引。这样当ARM进入异常模式的时候，程序就可以把一般通用寄存器压入堆栈，返回时再出栈，保证了各种模式下程序的状态的完整性。</p><h2 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h2><h3 id="立即数寻址"><a href="#立即数寻址" class="headerlink" title="立即数寻址"></a>立即数寻址</h3><p>立即数寻址，是一种特殊的寻址方式，操作数本身就在指令中给出，只要取出指令也就取到了操作数。这个操作数被称为立即数，对应的寻址方式也就叫做立即数寻址。例如以下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">ADD R0,R0,#0x3f；<br></code></pre></td></tr></table></figure><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h3><ul><li>B</li></ul><p>B指令格式为：B{条件} 目标地址</p><p>B 指令是最简单的跳转指令。一旦遇到一个B 指令，ARM 处理器将立即跳转到给定的目标地址，从那里继续执行。注意存储在跳转指令中的实际值是相对当前PC 值的一个偏移量，而不是一个绝对地址，它的值由汇编器来计算（参考寻址方式中的相对寻址）。它是 24 位有符号数，左移两位后有符号扩展为 32 位，表示的有效偏移为 26 位(前后32MB 的地址空间)。</p><ul><li>BL</li></ul><p>带链接的跳转。 首先将当前指令的下一条指令地址保存在LR寄存器，然后跳转的lable。通常用于调用子程序，可通过在子程序的尾部添加MOV PC, LR 返回。</p><p>BL 指令的格式为：</p><p>BL{条件} 目标地址</p><ul><li>BX</li><li>BLX</li></ul><h3 id="数据处理指令"><a href="#数据处理指令" class="headerlink" title="数据处理指令"></a>数据处理指令</h3><p>数据处理指令有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">MOV ADD ADDS ADC SUB<br>SUBS SBC RSB MUL AND<br>ORR EOR BIC CMP TST<br>TEQ LSL LSR ASR RORV<br></code></pre></td></tr></table></figure><p><strong>数据处理指令语法</strong></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">&lt;操作</span><span class="hljs-template-variable">&#123;&lt;cond&gt;&#125;</span><span class="hljs-template-variable">&#123;S&#125;</span><span class="language-xml">&gt; <span class="hljs-tag">&lt;<span class="hljs-name">Rd</span>&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">Rn</span>&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">Operand2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">操作码</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">目标寄存器Rd</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">第一操作寄存器Rn</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">第二操作数Operand2</span>&gt;</span></span><br><span class="language-xml">;第一个位置必须是寄存器，第二操作数可以是寄存器，也可以是立即数</span><br></code></pre></td></tr></table></figure><h4 id="数据传送指令-MOV"><a href="#数据传送指令-MOV" class="headerlink" title="数据传送指令 MOV"></a>数据传送指令 MOV</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov r1, #0x1　　      ;r1 = 0x1　　　　0x1 是立即数<br>mov r2, r1　　        ;r2 = r1 <br>mvn r3, r2　　        ;r3 = ~r2<br>mov r1, 0xffffff00　　;0xffffff00 不是立即数，只是编译器在编译阶段对其进行了替换<br>mvn r1, 0x000000ff　　;替换的指令<br> <br>;一条数据传送指令 mov reg, #n mov reg占用 bit[31:12]，bit[11:0]留给立即数使用，因此立即数自包含2^12个<br>;一个立即数由 bits[8:0]循环右移 2 * bits[11:9]得到。（一个八位的数循环右移偶数次得到）<br>;立即数的本质是包含于指令中的数，占用指令本身的空间<br></code></pre></td></tr></table></figure><h4 id="加法指令-ADD"><a href="#加法指令-ADD" class="headerlink" title="加法指令 ADD"></a>加法指令 ADD</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;加法指令执行时，若没有进位 CPSR &#x27;C&#x27; 位置 0<br>mov r0, #1<br>mov r1, #1<br>add r2, r1, r0　　;r2 = r1 + r0<br>add r2, r1, #2　　;r2 = r1 + 2<br></code></pre></td></tr></table></figure><h4 id="带进位的加法指令-ADC"><a href="#带进位的加法指令-ADC" class="headerlink" title="带进位的加法指令 ADC"></a>带进位的加法指令 ADC</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;两个64位数相加，第一个64位的低32位放在 r0，高位放到 r1，第二个64位数的低32位放在 r2 高32位放在 r3<br>;编写代码实现两个64位数的和，结果的低32位放在 r4 高32位放在 r5<br>mov r0, #0xfffffffe　　;第一个数的低32位<br>mov r1, #1　　;第一个数的高32位<br>mov r2, #0x5　　;第二个数的低32位　<br>mov r3, #1　　;第二个数的高32位<br>adds r4, r0, r2 <br>adc r5, r1, r3　　; adc运算的实质是 r5 = r1 + r3 + &#x27;C&#x27;　　&#x27;C&#x27;位 CPSR 进位标志<br></code></pre></td></tr></table></figure><h4 id="减法指令-SUB"><a href="#减法指令-SUB" class="headerlink" title="减法指令 SUB"></a>减法指令 SUB</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;减法指令执行时，没有借位时 CPSR &#x27;C&#x27; 位置 1<br>mov r0, #5<br>mov r1, #3<br>sub r2, r0, r1　　;r2 = r0 - r1<br></code></pre></td></tr></table></figure><h4 id="带借位的减法指令-SBC"><a href="#带借位的减法指令-SBC" class="headerlink" title="带借位的减法指令 SBC"></a>带借位的减法指令 SBC</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov r0, #1　　;第一个数的低32位<br>mov r1, #3　　;第一个数的高32位<br>mov r2, #3　　;第二个数的低32位<br>mov r3, #1　　;第二个输的高32位<br>subs r4, r0, r2　　<br>sbc r5, r1, r3<br></code></pre></td></tr></table></figure><h4 id="逆向减法指令-RSB"><a href="#逆向减法指令-RSB" class="headerlink" title="逆向减法指令 RSB"></a>逆向减法指令 RSB</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov r0, #3<br>rsb r1, r0, #5　　;r1 = 5 - r0<br></code></pre></td></tr></table></figure><h4 id="乘法指令-MUL"><a href="#乘法指令-MUL" class="headerlink" title="乘法指令 MUL"></a>乘法指令 MUL</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;为了提高效率，任何乘法指令不可以使用立即数<br>mov r0, #3<br>mov r1, #5<br>mov r2, r0, r1　　;r2 = r0 * r1<br></code></pre></td></tr></table></figure><h4 id="乘—累加指令-MLA"><a href="#乘—累加指令-MLA" class="headerlink" title="乘—累加指令 MLA"></a>乘—累加指令 MLA</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mla r3 ,r0, r1, r2　　;r3 = (r0 * r1) + r2<br></code></pre></td></tr></table></figure><h4 id="逻辑与指令-AND"><a href="#逻辑与指令-AND" class="headerlink" title="逻辑与指令 AND"></a>逻辑与指令 AND</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov r0, #0xf0<br>mov r1, #0x0f<br>and r2, r0, r1　　;r2 = r0 &amp; r1<br></code></pre></td></tr></table></figure><h4 id="逻辑或指令-ORR"><a href="#逻辑或指令-ORR" class="headerlink" title="逻辑或指令 ORR"></a>逻辑或指令 ORR</h4><p>ORR指令的格式为：ORR{条件}{S} 目的寄存器，操作数1，操作数2</p><p>ORR指令用于在两个操作数上进行逻辑或运算，并把结果放置到目的寄存器中。操作数1应该是一个寄存器，操作数2可以是一个寄存器，被移位的寄存器，或一个立即数。该指令常用于设置操作数1的某些位。<br>指令示例：ORR R0，R0，＃3；该指令设置R0的0、1位，其余位保持不变。</p><p>orr r0,r0,#0xd3</p><p>0xd3&#x3D;1101 0111<br>将r0与0xd3作算数或运算，然后将结果返还给r0,即把r0的bit[7:6]和bit[4]和bit[2:0]置为1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov r0, #0xf0<br>mov r1, #0x0f<br>orr r2, r0, r1　;r2 = r0 | r1<br></code></pre></td></tr></table></figure><h4 id="逻辑异或运算指令-EOR"><a href="#逻辑异或运算指令-EOR" class="headerlink" title="逻辑异或运算指令 EOR"></a>逻辑异或运算指令 EOR</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov r0, #0xf0<br>mov r1, #0x0f<br>eor r2, r0, r1　　;r2 = r0 ^ r1<br></code></pre></td></tr></table></figure><h4 id="位清零指令-BIC"><a href="#位清零指令-BIC" class="headerlink" title="位清零指令 BIC"></a>位清零指令 BIC</h4><p>指令格式：BIC{cond}{S} Rd,Rn,operand2<br>BIC指令将Rn 的值与操作数operand2 的反码按位逻辑”与”，结果存放到目的寄存器Rd 中。指令示例：BIC R0,R0,#0x0F ；将R0最低4位清零，其余位不变。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov r0, #0xff<br>bic r0, r0, #0xf　　;第二个操作数的每一位为 1 就把第一个操作数对应的位清零<br></code></pre></td></tr></table></figure><h4 id="比较指令-CMP"><a href="#比较指令-CMP" class="headerlink" title="比较指令 CMP"></a>比较指令 CMP</h4><p>cmp(compare)指令进行比较两个操作数的大小</p><p>例:cmp oprd1,oprd2</p><p>为第一个操作减去第二个操作数,但不影响第两个操作数的值，它影响flag的CF，ZF，OF，AF，PF</p><p>若执行指令后</p><h5 id="ZF"><a href="#ZF" class="headerlink" title="ZF"></a>ZF</h5><p>ZF&#x3D;1,说明两个数相等，因为zero为1说明结果为0</p><h5 id="CF"><a href="#CF" class="headerlink" title="CF"></a>CF</h5><p>当无符号时：</p><p>CF&#x3D;1 则说明了有进位或借位，cmp是进行的减操作，故可以看出为借位，所以，此时oprd1&lt;oprd2</p><p>CF&#x3D;0 则说明了无借位，但此时要注意ZF是否为0，若为0，则说明结果不为0，故此时oprd1&gt;oprd2</p><p>当有符号时：</p><p>若SF&#x3D;0，OF&#x3D;0 则说明了此时的值为正数，没有溢出，可以直观的看出，oprd1&gt;oprd2</p><p>若SF&#x3D;1，OF&#x3D;0 则说明了此时的值为负数，没有溢出，则为oprd1&lt;oprd2</p><p>若SF&#x3D;0，OF&#x3D;1 则说明了此时的值为正数，有溢出，可以看出oprd1&lt;oprd2</p><p>若SF&#x3D;1，OF&#x3D;1则说明了此时的值为负数，有溢出，可以看出oprd1&gt;oprd2</p><p>最后两个可以作出这种判断的原因是，溢出的本质问题：</p><p>两数同为正，相加，值为负，则说明溢出</p><p>两数同为负，相加，值为正，则说明溢出</p><p>故有，正正得负则溢出，负负得正则溢出</p><p>补充： 两数相减，同号，则不溢出；两数为异号，结果与减数符号相同，则溢出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;实质是一条减法指令<br>;没有目标register，用来比较两个数是否相等，结果放到 CPSR 的 &#x27;Z&#x27; 位判断<br>mov r0, #2<br>mov r1, #1<br>cmp r0, r1<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/03/06/hello-world/"/>
    <url>/2025/03/06/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
